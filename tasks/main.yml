---
- name: Install and upgrade NodeJS
  block:

    - name: Include APT tasks
      ansible.builtin.include_tasks: apt.yml
      tags:
        - nodejs_apt

    - name: Remove Legacy node in /usr/local/bin
      ansible.builtin.file:
        path: /usr/local/bin/node
        state: absent

    - name: Check if NodeJS is already installed
      ansible.builtin.command: which nodejs
      check_mode: false
      changed_when: false
      register: nodejs_path_check
      failed_when: nodejs_path_check.rc is not regex('0|1')

    - name: Check version of NodeJS
      block:

        - name: Version of NodeJS installed
          ansible.builtin.command: nodejs --version
          check_mode: false
          register: nodejs_installed_check
          changed_when: false

        - name: Set a variable for the installed version of NodeJS
          ansible.builtin.set_fact:
            nodejs_installed: "{{ nodejs_installed_check.stdout | regex_replace('^v', '') | regex_replace('\\.(.*)$') | trim | int }}"

        - name: Print the installed and required versions of NodeJS
          ansible.builtin.debug:
            msg: "nodejs installed is {{ nodejs_installed }} and required is {{ nodejs_version }}"
            verbosity: 1

        - name: Remove NodeJS if the installed version is newer than the required version
          ansible.builtin.apt:
            pkg:
              - nodejs
            state: absent
          when: ( nodejs_installed | int ) > ( nodejs_version | int )

      when: nodejs_path_check.rc == 0

    - name: NodeJS package present
      ansible.builtin.apt:
        pkg:
          - nodejs
        state: latest
        update_cache: true

    - name: Install additional NodeJS packages
      community.general.npm:
        name: "{{ pkg }}"
        global: true
      loop: "{{ nodejs_packages }}"
      loop_control:
        loop_var: pkg
      when: ( nodejs_packages is defined ) and ( nodejs_packages != [] )

  tags:
    - nodejs
...
